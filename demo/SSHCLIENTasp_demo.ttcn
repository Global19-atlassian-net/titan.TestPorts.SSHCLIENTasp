///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Copyright Test Competence Center (TCC) ETH 2005                           //
//                                                                           //
// The copyright to the computer  program(s) herein  is the property of TCC. //
// The program(s) may be used and/or copied only with the written permission //
// of TCC or in accordance with  the terms and conditions  stipulated in the //
// agreement/contract under which the program(s) has been supplied.          //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
//
//  File:               SSHCLIENTasp_PT.hh
//  Description:        SSHCLIENTasp test port header
//  Prodnr:             CNL 113 484
//  Rev:                R3E
//  Updated:            2005.11.23
//  Contact:            http://ttcn.ericsson.se
// 


module SSHCLIENTasp_demo
{
import from SSHCLIENTasp_functions all;
import from SSHCLIENTasp_Types all;


modulepar
{
    integer clientCount := 1;
    integer loginCount := 1;
    integer opCount := 1;

    charstring nodeIPAddr;
    charstring usrname;
    charstring pwd
}


/*
// Executable in single mode
testcase TC() runs on SSH_CT
{
    log("TC started");
    SSH_PCO.send(t_ASP_SSH_SetRemoteHost(nodeIPAddr));
    if (f_sshLogin(usrname, pwd)) {
        log("Successfully logged in: " & nodeIPAddr);

        var charstring rawDircontent := f_sshLs("-l /tmp");
        if (rawDircontent != "f_sshLs: error") {
            log("Raw dircontent: sshRespStr=", sshRespStr);
            setverdict(pass);
        } else {
            setverdict(fail);
        }
        f_sshLogout(true);

    } else {
        log("Unable to login to node:", nodeIPAddr);
        setverdict(fail);
    }
    log("TC finished");
}

control
{
    execute(TC());
} // control
*/

// Executable in parallel mode

function f_cliTester() runs on SSH_CT
{
    log("f_cliTester started");
    SSH_PCO.send(t_ASP_SSH_SetRemoteHost(nodeIPAddr));

    for(var integer i:=0; i<loginCount; i:=i+1) {
        if (f_sshLogin(usrname, pwd)) {
            log("Successfully logged in: " & nodeIPAddr);
            for(var integer j:=0; j<opCount; j:=j+1) {
                var charstring rawDircontent := f_sshLs("-l /tmp");
                if (rawDircontent != "f_sshLs: error") {
                    log("Raw dircontent: sshRespStr=", sshRespStr);
                    setverdict(pass);
                } else {
                    setverdict(fail);
                }
            } // for j

            f_sshLogout(true);

        } else {
            log("Unable to login to node:", nodeIPAddr);
            setverdict(fail);
        }

    } //for i

    log("f_cliTester finished");



} // f_cliTester


testcase TC_parallel() runs on MTC_CT
{
    for(var integer i:=0; i<clientCount; i:=i+1) {
        cliClient[i] := SSH_CT.create;
        cliClient[i].start(f_cliTester());
    }

    all component.done;

} // TC_parallel
control
{
    execute(TC_parallel());
} // control

} // module
